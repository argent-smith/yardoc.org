#!/usr/bin/env ruby
require 'yard'
require 'fileutils'
require 'rdiscount'
require 'erb'

ROOT = File.expand_path(File.join(File.dirname(__FILE__), '..'))
LAYOUTS = {}

# source/destination
SRC = 'src'     
PUB = 'public'

$:.unshift ROOT        # These guys are here
require 'translations' # to aid localization

module Helpers
  def markdown(text)
    RDiscount.new(text).to_html
  end
  
  def erb(__file)
    LAYOUTS[__file] ||= File.read(File.join(ROOT, SRC, self.lang, 'templates', "#{__file}.erb"))
    ERB.new(LAYOUTS[__file], 0, '<>').result(binding)
  end
end

class Generator
  include Helpers
  
  attr_accessor :lang, :url, :root_path, :layout, :content, :title
  
  def initialize(lang, url, layout, root_path = '.')
    self.root_path = (root_path.empty? or root_path.eql?('..'))? '.' : root_path.gsub(%r{/$}, '')
    self.root_path = self.root_path.gsub(%r{^\.\./}, '')
    self.lang = lang
    self.url = url
    self.layout = layout.to_sym
    yield(self) if block_given?
  end
  
  def to_html
    erb(layout)
  end
  
  def write
    path = File.join(ROOT, PUB, url + '.html')
    FileUtils.mkdir_p(File.dirname(path))
    File.open(path, 'w') {|f| f.write to_html }
  end
end

def map(lang, url, layout, &block)
  Generator.new(lang, url, layout, '../' * url.count('/').pred, &block).write
end

TRANSLATIONS.each do |lang|
  Dir[File.join(ROOT, SRC, lang, 'site/**/*.{md,html}')].each do |file|
    rel = File.relative_path(File.dirname(file), ROOT)
    rel = '.' if rel.empty?
    url = file.sub(%r{^#{ROOT}/#{SRC}/#{lang}/site/*}, "#{lang}/").sub(/\.(html|md)$/, '')
    content = File.read(file)
    gen = Generator.new(lang, url, file =~ %r{/guides/} ? :guide : :regular, rel.gsub(%r{^\.\./}, ''))
    gen.content = content
    case file
    when /\.md$/
      gen.title = content[/\A\s*#\s*(.+)/, 1]
        gen.content = gen.markdown(content)
    else
      gen.content = content
    end
    gen.write
  end

  map lang, "#{lang}/index", :home
  map lang, "#{lang}/guides/index", :guides
end
